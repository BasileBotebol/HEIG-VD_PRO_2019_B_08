package controllers;

import controllers.BDDpackage.BDD;

import controllers.BDDpackage.Categorie;
import controllers.BDDpackage.SousCategorie;
import controllers.BDDpackage.Utilisateur;
import controllers.BDDpackage.Pays;
import controllers.BDDpackage.Statut;
import controllers.BDDpackage.Transaction;
import java.util.ArrayList;
/* Dependance pour PDF */
import java.io.FileNotFoundException;
import java.io.FileOutputStream;


import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorkerHelper;

import com.itextpdf.text.Section;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Font;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;


import java.awt.Color;
import java.util.Date;
/**
 * Cette classe permet de créer un PDF des historiques d'un user
 */
public class PDF {

    Utilisateur user ;

    private static Font Title = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font Title2 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
    private static Font info = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);


    PDF(Utilisateur user){
        this.user = user;
    }

    public boolean cree(){

        boolean statut = false;
        Document document = new Document();

        try
        {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Historique.pdf"));
            document.open();

            addMetaData(document);
            addTitlePage(document);
            createTable(document);

            document.close();
            writer.close();

            statut = true;
        } catch (DocumentException e)
        {
            e.printStackTrace();
        } catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }


        return statut;
    }

    private static void addMetaData(Document document) {
        document.addTitle("Historique de vos dépenses");
        document.addSubject("Historique");
        document.addKeywords("Historique, PDF, Compact Budget");
        document.addAuthor("Compact Budget");
        document.addCreator("Compact Budget");
    }

    private void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Historique des mouvements financiers", Title));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Rapport généré pour : " + user.nom + " " + user.prenom + " le " + new Date() , //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                info));
        addEmptyLine(preface, 2);

        preface.add(new Paragraph(
                "Voici la liste de vos derniers mouvements financiers : ", Title2));

        addEmptyLine(preface, 4);

        document.add(preface);
    }

    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }


    private void createTable(Document document) {
        try {
            PdfPTable table = new PdfPTable(3);
            // table.setBorderColor(BaseColor.BLUE);

            // t.setBorderColor(BaseColor.GRAY);
            // t.setPadding(4);
            // t.setSpacing(4);
            // t.setBorderWidth(1);

            PdfPCell c1 = new PdfPCell(new Phrase("Sous catégorie"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            c1.setVerticalAlignment(Element.ALIGN_MIDDLE);
            c1.setBorderWidth(2f);
            c1.setFixedHeight(50f);

            table.addCell(c1);

            c1.setPhrase(new Phrase("Date"));
            table.addCell(c1);

            c1.setPhrase(new Phrase("Montant"));
            table.addCell(c1);


            for ( Transaction transaction : (HomeController.DB).getAllTransaction(user.id) ){
                c1 = new PdfPCell(new Phrase(transaction.name));
                c1.setMinimumHeight(25f);
                c1.setHorizontalAlignment(1);
                c1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                table.addCell(c1);
                c1.setPhrase(new Phrase(transaction.date));
                table.addCell(c1);
                c1.setPhrase(new Phrase(Double.toString(transaction.valeur)));
                table.addCell( c1);
            }

            document.add(table);

        } catch (DocumentException e) {
            e.printStackTrace();
        }
    }
}
